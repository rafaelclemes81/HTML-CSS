ANOTAÇÕES CURSO DE HTML/CSS

SITES INTERESSANTES:
ÍCONES, SE EU QUISER CRIAR MEU PRÓPRIO ÍCONE: https://www.favicon.cc/
GERAR UM ÍCONE A PARTIR DE UMA IMAGEM OU TEXTO: https://favicon.io/
BAIXAR FOTOS E VÍDEOS GRÁTIS(SEM DIREITOS AUTORAIS)- https://www.pexels.com/pt-br/
PARA CRIAR PALETA DE CORES, UTILIZANDO CÍRCULO CROMÁTICO - color.adobe.com / wwww.paletton.com / coolors.co


TAG'S:
h1 - título (h2, h3, h4, h5 e h6. Só vai até h6) - trata hierarquia de títulos dentro da página
p - parágrafo
hr - linha horizontal
img src="caminho do arquivo\nome do arquivo" alt="texto alternativo"
br - quebra de linha
&lt; - coloca o caracter especial <
&gt; - coloca o caracter especial > 
&#x - esse código seguido do código referente ao emoji que quero adicionar + ;
	  O código d emoji encontro na emojipedia.org
link - no visual studio digita link, e na lista que aparecer escolher link:favicon. Basta clicar, e substituir o nome do arquivo, utilizando Ctrl+Espaço para abrir as sugestões de arquivos.
	  
*** FORMATOS DE IMAGENS ***
JPEG - ALTA COMPACTAÇÃO, NÃO PERMITE TRANSPARÊNCIA
PNG - COMPACTADO, PORÉM MENOS QUE O JPEG. PERMITE TRANSPARÊNCIA. MAIOR QUALIDADE.
GIF - PERMITE ANIMAÇÃO E TRANSPARÊNCIA, MENOS COMPACTADO.

*** FORMATAÇÃO DE TEXTOS ****
/b - faz o texto em negrito
/strong (semântica)- dá destaque ao texto, marcando em negrito
/i - coloca o texto em itálico
/em (semântica) - dá ênfase ao texto, colocando em itálico.
/mark - essa TAG faz o texto marcado(como um marca texto) por padrão em amarelo.
	obs.: se quiser uma cor diferente posso usar o parâmetro CSS style e escolhendo a cor de fundo somente dentro dessa tag.
	Se eu quiser colocar uma cor diferente para todas as tags /mark, devo criar um seletor CSS dentro do Head. Exemplo:
	<style>
		mark {
			background-color: corquevouquerer;
		}
	</style>
/big - é uma tag obsoleta, porém, ainda é reconhecido no HTML5 e cria um texto um pouco maior que o da fonte dentro do /p
/small - é uma tag obsoleta, porém, ainda é reconhecido no HTML5 e cria um texto um pouco menor que o da fonte dentro do /p
/sup - faz o texto sobrescrito
/sub - faz o texto ficar subescrito
/del - faz o texto como excluído
/ins - faz o texto como inserido

*** CITAÇÕES E TRECHOS DE CÓDIGO ***

<code> - essa TAG formata com fonte monoespaçada para melhor visualização um trecho de código por exemplo: documento.getElementById('teste')
<pre> - serve para envelopar a TAG code, que estando dentro da TAG <pre> obedece também a endentação do texto digitado. Dessa forma um trecho de código de fonte por exemplo, é apresentado de melhor forma.
		obs.: essa tag exibe o texto exatamente como é digitado, inclusive quebrar de linhas, endentação, etc.
		
<q> - essa TAG cria citações, e já coloca o texto entre aspas.
<blockquote> - cria uma citação deslocando o texto um pouco a direita. 
	obs.: nesta TAG blockquote usar o parâmetro cite:"colocar a url" ajuda mecanismos de busca.
<abbr> - essa tag cria uma legenda sobre um texto que será visualizada quando posicionar o mouse sobre o texto. A legenda que será apresentada, é informada dentro do parâmetro title.
	exemplo: <abbr title="Hiper Text Markup Language">HTML</abbr>


**** ATALHOS DE TECLADO INTERESSANTES NO VS CODE ****

CTRL + SHIFT + P - é o atalho usado para envelopar um trecho de código
SHIFT + TAB - ajuste de endentação
CTRL + ESPAÇO - abre opções em determinados casos. Por exemplo para abrir as opções de um parâmetro.

*** LISTAS ***

ol - cria listas ordenadas. O parâmetro type define de vai ser numérica, de A a Z ou em algarismos romanos. O parâmetro start define a sequencia da ordenação: por exemplo, start="5" a lista começa em 5. Os itens da lista são apresentados utilizando a tag <li>

ul - ol - cria listas não ordenadas. O parâmetro type define o tipo de marcador(circle, disc ou square). Os itens da lista são apresentados utilizando a tag <li>

dl - cria lista de definição
dt - cria um item(termo) de uma lista de definição
dd - cria uma descrição para um item(dt) de uma lista de definição
	Obs.: essas 3 tags são geralmente utilizadas em conjunto.

*** LINKS ***

<a> - cria um link. O parâmetro href="url" define o endereço que irá ser acessado ao clicar no link.
	- é recomendável que, ao criar um link para um endereço externo, usar o parâmetro target="_blank" - dessa forma o link não vai sobrepro a navegação no site atual, abrindo uma nova aba no navegador.
	- o parâmetro rel="" possui vários valores que podem ser informados. Para indicar um link externo deve-se usar rel="external"
	- quando for uma página interna, dentro do esquema de navegação do próprio site usar rel="next" ou rel="prev". Apesar de não ser necessário, também posso informar o parâmetro target="_self" avisando que o link vai abrir na própria aba do navegador.
	- para criar o link para uma página interna, basta teclar CTRL+ESPAÇO com o cursor posicionado entre as aspas do parâmetro href, que o próprio VSCode irá mostrar a relação das pastas e páginas disponíveis dentro da mesma pasta. Quando o link for para uma pasta que está um nível acima na estrutura de pastas do servidor preciso informar href="../" - nesse momento já vai abrir a relação dos arquivos que estão na pasta que está um nível acima.
	- IMPORTANTE: o uso do parâmetro rel="" é importante para os mecanismos de busca.
	
*** IMAGENS DINÂMICAS ****

IMPORTANTE ---- é preciso observar a questão do tamanho das imagens nos diferentes dispositivos em que o site será visualizado. 
<picture> - dentro dessa tag, define com a tag <img> a imagem padrão que será carregada ao abrir o site. Porém dependendo do dispositivo ou do tamanho que o usuário usa a janela do navegador, pode ser necessário que seja carregada outra imagem com tamanho menor. Para isso utiliza-se a tag <source:media-type> onde defino uma imagem que será aberta quando o dispositivo tiver um tamanho até uma quantidade de pixels que eu estabelecer. **** DICA **** sem fazer para carregar a imagem da maior para a menor.
	Exemplo: 
	<picture>
        <source media="(max-width: 750px)" srcset="imagens/fotop.png" type="image/png"> *** ESSA LINHA DEFINE O ARQUIVO DE IMAGEM QUE VOU APRESENTAR EM DISPOSITIVOS COM LARGURA MÁXIMA DE 750px 
        <source media="(max-width: 1050px)" srcset="imagens/fotom.png" type="image/png"> *** ESSA LINHA DEFINE O ARQUIVO DE IMAGEM QUE VOU APRESENTAR EM DISPOSITIVOS COM LARGURA MÁXIMA DE 1050px
        <img src="imagens/fotog.png" alt="Imagem flexível">  *** ESSA LINHA DEFINE O ARQUIVO DE IMAGEM PADRÃO QUE VOU APRESENTAR EM DISPOSITIVOS COM LARGURA ACIMA DE 1050px
    </picture>
	
**** COLOCANDO ÁUDIO NO SITE ***
<audio> - utilizar essa tag. Alguns parâmetros interessantes a serem usados são o autoplay(toca automaticamente), controls(mostrar os controles de aúdio), loop(repete ao final do áudio)
			outro parâmetro necessário é o preload(valor recomendado =metadata)
			exemplo:
			
			<audio preload="metadata" autoplay controls loop>
				<source src="midia/The Moon Drops - Nathan Moore.mp3" type="audio/mpeg">
				<source src="midia/The Moon Drops - Nathan Moore.ogg" type="audio/ogg">
				<source src="midia/The Moon Drops - Nathan Moore.wav" type="audio/wav">
			</audio>

**** CSS ****
1 - quando for usar CSS Inline, defino dentro do parâmetro style dentro de cada tag da página, as formatações que quero para cada tag.
	Exemplo: <h1 style="color: brown;">Capítulo 1</h1>

2 - para usar CSS internamente dentro de cada páginas, uso a tag <style> e dentro da mesma, crio os seletores CSS(nome da tag + {}) para definir a formatação que quero aplicar para cada tag da minha página.
	Exemplo:
	<style>
        body{
            background-color: burlywood;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 20px;
        }
        h1{
            color: darkblue;
            background-color: deepskyblue;
        }
        h2{
            color: darkred;
        }
        p{
            text-align: justify;
        }
    </style>
3 - para utilizar CSS externamente, crio um arquivo .CSS e dentro desse crio os seletores CSS definindo a formatação que desejo para cada tag do meu projeto. 
	Nas páginas do projetos, importo essas formatações utilizado a tag<link>
	Exemplo: <link rel="stylesheet" href="style.css">
	
4 - posso misturar as três formas de utilização de CSS nas minhas páginas. Nesse caso a ordem de precedência que ocorre é:
	1º - CSS Inline(parâmetro style dentro de cada tag das páginas do projeto)
	2º - CSS Interno ou Local(tag <style>)
	3º - CSS Externo(arquivo externo)

5 - para criar um seletor com uma configuração global dentro da CSS inicio o seletor informando "*" ao invés do nome de uma tag específica.

**** CORES EM CSS*****

1ª forma - DEGRADE - usar a tag <backgroud-image> com a função linear-gradient. Posteriormente informo a direção (to right, to left, to top OU to bottom OU AINDA o ângulo que as cores seguirão. Por exemplo 45deg) seguido das cores(posso colocar quantas desejar)
		Exemplo:  body{
       			         background-image: linear-gradient(to right, white, blue);
			      }
2ª forma - DEGRADE PARTINDO DO CENTRO - para isso segue a mesma lógica, porém utilizo a função radial-gradiente, trocando a direção pelo atributo circle.
		Exemplo:  body{
       			         background-image: radial-gradient(circle, white, blue);
			      }

**** FONTES EM CSS ****

1 - Familias de fontes (font-family)
	- ao informar um font-family dentro de um seletor CSS, o VS Code sugere as Safe Combination, que tem sempre duas fontes do tipo que quero(serif, san-serif, etc) e a última indicação 	é do tipo genércio(serif, san-serif, etc). Isso porque as vezes, um dispositivo que for acessar o site, poderá não suportar uma das duas fontes informadas, e irá mostrar uma fonte genérica, seguindo o tipo de fonte informado.

2 - Tamanhos de fontes(font-size)
	Existem dois tipos de medidas(tamanhos) de fontes:
		a - Medidas Absolutas - cm(centímetro), mm(milímetro), in(polegada), px(pixels), pt(pontos), pc(paica). Pontos e paicas são medidas da tipografia impressa, não recomenda-se utilizar. O W3C recomenda utilizar o px
		b - Medias Relativas - em, ex, rem, vw, vh. O W3C recomenda utilizar o em para medida de fonte.
		
		Obs.: é recomendável utilizar o "em" como declaração de tamanho para fontes. 1em corresponde à medida de 16px. 16px é meio que uma medida padrão dos navegadores, é mais o menos o tamanho apresentado quando não se especifíca um tamanho para a fonte. O "em" trabalha a porcentagem em relação a fonte padrão que é apresentada pelo navegador. Lembrando que essa fonte padrão apresentada pelo navegador, está diretamente ligada ao tipo de tela em que o site está sendo visualizado. Existem telas com pixels duplos, pixels quádruplos, etc.
3 - Peso (font-weight) - 
		nessa propriedade posso informar um valor literal (lighter, normal, bold ou bolder) ou, um valor numérico (de 100 a 900). Essa propriedade trata a questão do negrito. Porém não são todas as fontes que permitem manipular essa característica do negrito.
		
	Estilo (font-style)
		nessa propriedade consigo definir se uma fonte vai ser em itálico. Existem outros valores que podem ser utilizados junto a essa propriedade.
		
	Shorthand(font)
		utilizando a propriedade font (font-style font-weight font-size font-family) eu consigo declarar todas as características da fonte em apenas uma linha. 
			Exemplo: font(italic bolder 3em 'Courier New', Courier, monospace). Nesse exemplo vai ser aplicada a fonte Courier New, em itálico, extra negrito, no tamanho de 3em(48px)
4 - Google Fonts
		acessar: fonts.google.com
		@import - precisa estar fora dos seletores CSS

* Recomendação: usar no máximo 3 famílias de fontes num site.

5 - Fontes externas baixadas
	Para usar uma fonte baixada, preciso criar uma font-face conforme abaixo:
	
		font-face {
			font-family: 'Australia'; /* aqui defino um nome para a font-family */
			src: url("South Australia.ttf"); /* aqui defino o caminho do arquivo da fonte baixada. Se precisar incluir mais de um arquivo, caso haja um arquivo.oft por exemplo basta incluir vírgula e mais uma url */
			font-weight: normal; /* peso da fonte, como qualquer outra */
			font-style: normal;  /* estilo da fonte, como qualquer outra */
		}
			  
			  
6 - Capturar fontes de outro site
	Para isso usar a extensão Fonts Ninja para o google chrome.

7 - Capturar fontes de uma imagem:
	Para isso utilizar um dos sites abaixo:
	https://www.whatfontis.com/
	https://www.fontsquirrel.com/
	https://www.myfonts.com/
	
**** ALINHAMENTO DE TEXTOS COM CSS ****

Para alinhar texto em CSS é utilizado a função text-align. Os valores possíveis são center, right, left ou justify.
Uma outra função interessante é text-indent. Ela server para aplicar um récuo no texto de alguma tag.

**** SELETORES PERSONALIZADOS ****
1 - UTILIZANDO ID
	Seletores personalizados eu represento colocando tag + id="nomeparaoid". Exemplo: <h1 id="principal">Título </h1>
	Posteriormente em CSS utilizo # + o nome do identificador que utilizei no HTML.
		Exemplo: h1#principal {
					background-color: white;
				}
	Obs.: na CSS posso criar o id(#) de forma que possa utilizar em qualquer tag.
		Exemplo:
			Em HTML
				<h1 id="principal">Título </h1>
			Em CSS
				#principal {
					background-color: white;
				}

	Recomendação: não usar o mesmo id em mais de um elemento(tag) dentro do mesmo documento.

2 - UTILIZANDO CLASS
	Quanto preciso que duas tags tenham a mesma formatação dentro do mesmo documento vou utilizar uma class.
	Exemplo:
			Em HTML
				<h1 class="principal">Título </h1>
			Em CSS
				.principal {
					background-color: white;
				}
				
**** MACETE PARA CENTRALIZAR UM VÍDEO INCORPORADO DO YOUTUBE/VIMEO ****
1 - Primeiramente envelopar o código incorporado em uma div. Posteriormente, caso eu vá ter vários vídeos dentro da minha página, utilizo uma class para poder definir as formatações para essa div dentro do CSS***

**** IMAGENS DE FUNDO ****

- para colocar uma imagem de fundo vou utilizar background-image: url("caminho do arquivo")
	para redefinir o tamanho que a imagem será exibida vou utilizar background-size: 100px 100 px ou 100% por exemplo; por exemplo.
		o parâmetro contain para o background-size, vai garantir que 100% da imagem seja exibida quando a tela aumentar ou diminuir. Porém quando diminuir altura ou largura, barras serão criadas ao lado das imagens, ou encima e embaixo. Esse parâmetro não corta a imagem, por isso as barras podem aparecer.
		o parâmetro cover para o background-size vai cobrir toda a área do navegador com a imagem, porém poderá não exibir a imagem completa, dependendo do tamanho da janela do navegador. A imagem será totalmente exibida quando houve o espaço necessário na janela igual ou maior que o tamanho da imagem
	para definir a forma de repetição utilizo background-repeat: no-repeat por exemplo vai exibir apenas uma vez. Existem várias formas de repetição.
	para posicionar vou utilizar background-position: left top; por exemplo. Existem vários outros atribuidos que posso utilizar para posicionar (left, bottom, right top, right bottom, center center, etc - Importando que informarei a posição seguindo a ordem "coluna linha"). A posição informada, define um ponto de ancoragem para a imagem em relação a área de visualização do navagador.
	para que a imagem acompanhe o conteúdo vou utilizar o background-attachment. nessa função, o parâmetro scroll, faz a imagem acompanhar o conteúdo durante a rolagem. O parâmetro fixed, fixa a imagem de fundo na área visível do navegador e rola apenas o conteúdo. Ou seja com o parâmetro fixed a imagem fica fixa.
	
	*** SHORTHAND USAR ESSA SEQUENCIA DE PARÂMETROS *** background: color image position repeat attachment;
		Obs.: sobre a shorthand "background", é importante atentar que apesar da documentação da W3C dizer que é possível informar o size depois do parâmetro repeat, na prática isso não funciona. Ou seja, o background-size precisa ser informado fora da shorthand.

	*** CENTRALIZAÇÃO VERTICAL DE CAIXAS ***
		para centralizar uma caixa verticalmente, preciso colocar a propriedade position com o parâmetro relative na caixa onde vou inserir uma segunda caixa, para a qual vou utilizar a propriedade position com parâmetro absolute. Uma caixa com position: absolute me permite que eu possa alterar as propriedades left, right, top e bottom. A partir dessa possibilidade vou alterando os valores, tanto em percentual ou em pixels, juntamente com a propriedade transform: translate até conseguir centralizar verticalmente determinada caixa.
		
		Exemplo real para seguir como base para centralizar uma caixa dentro de outra:
		
            background-image: url("imagens/target001.png");
            background-size: 100% 100%;
            position: absolute;
            height: 200px;
            width: 400px;
            background-color: yellow;

            left: 50%;
            top: 50%;

            transform: translate(-50%, -50%);
		
**** UTILIZANDO TABELAS EM HTML/CSS ****

1º DICA IMPORTANTE: NÃO UTILIZAR TABELAS PARA DEFINIR A ESTRUTURA DO SITE

	*** HIERARQUIA EM TABELAS SIMPLES ***
		<table> /* define o início da tabela
			<tr> /* define uma linha da tabela
				<th></th> /* cabeçalho da linha
				<td></td> /* dado da linha
			</tr>
		</table>
	
	*** ALINHAMENTO EM TABELAS COM CSS ***
		text-align: center; /* alinhamento horizontal */
        vertical-align: bottom; /* alinhamento vertical - alinhamento vertical, não uso center, mas sim middle */

	*** ANATOMIA DE TABELAS GRANDES
		CAPTION /* ESSA TAG SÓ ACEITA UM TEXTO, QUE SERÁ A LEGENDA DA TABELA.
		TABLE
			THEAD /* CABEÇALHO DA TABELAS
				TR, TD, TH
			TBODY /* CORPO DA TABELA
				TR, TD, TH
			TFOOT /* RODAPÉ DA TABELA
				TR, TD, TH
				
			*** não é uma regra que uma tabela grande tenha os três elementos
	*** ESCOPO DA TAG <TH>
		Uma TH identifica um identificador para a coluna ou linha da tabela. Para isso preciso identificar qual escopo de todas as TH. O escopo de uma TH pode ser "col" quando define um identificar para uma coluna, ou "row" quando define um identificador para uma linha.
		
		obs: só existe escopo em TH
		
	*** EFEITO ZEBRADO ***
		Para isso no CSS vou utilizar a pseudoclasse  nth-child(2m). Dessa forma, de duas em duas linhas vai ser aplicada a formação que eu defini dentro do seletor em questão.
		
		Exemplos:
			*** pulando de duas em duas linhas ***
				tbody > tr:nth-child(2m) {
					background-color: lightgray;
				}
			
			*** aplicando a formatação nas linhas ímpares(odd) ****
			
				tbody tr:nth-child(odd) {
					background-color: lightgray;
				}
				
			*** aplicando a formatação nas linhas pares(even) ***
			
				tbody tr:nth-child(even) {
					background-color: gray;
				}
				
				Obs.: posso utilizar as duas juntas (ímpares e pares), dessa forma consigo aplicar uma cor para as linhas ímpares e outra cor para as linhas pares.
				
	**** CABEÇALHO FIXO DURANTE A ROLAGEM DE TABELAS GRANDES **** 
		Passo 1: no seletor table do CSS, defino a position: relative;
		Passo 2: no seletor que identifica o título de cada coluna, defino position: sticky. Porém, isso vai fixar durante a rolagem, apenas o texto que está na tag th. Para dar o efeito desejado, aplico a mesma background-color que foi definido o thead. Feito isso, ao rolar uma tabela para os valores mais próximos do final, apesar do título das colunas ter se fixado, fica uma pequena linha em branco, o que visualmente não fica pegar. Para corrigir esse problema defino top: -1px;
		
		Exemplo: 
			thead > tr > th {
				position: sticky;
				top: -1px;
				background-color: rgb(39, 38, 38); /* essa cor é a mesma que está definida no seletor thead, nesse caso.
			}
			
		Obs.: essa técnica, em relação aos outros elementos da página, funciona enquanto a rolagem está com a tabela sendo visualizada, quando chega ao fim da tabela, o cabeçalho pára de aparecer juntamente com a tabela.
		
	**** MESCLAGEM DE CELULAS DE UMA TABELA EM HTML **** 
		A mesclagem de célular é feita no HTML, colocando o parâmetro colspan="2" na tag <td>. Colspan mescla horizontalmente, enquanto rowspan, mescla células verticalmente.
		
		Exemplo de sintaxe de colspan: <td colspan="2">B</td>
		
		Exemplo de sintaxe de rowspan: <td rowspan="3">F</td>
	
	**** TABELAS RESPONSIVAS ****
		
		Se tenho uma tabela com muitas colunas, vai acabar criando uma rolagem no eixo X da página. E isso atrapalha a leitura do conteúdo. Principalmente em telas menores, como de celular por exemplo.
		Para solucionar, e fazer com que a rolagem aconteça apenas dentro da tabela, devo envelopar a tabela<table> completa dentro de uma <div>. Posteriormente posso criar uma classe ou um id para essa div.
		Na CSS, para o seletor div#id ou div.class que eu criar, vou informar uma propriedade chamada overflow-x: auto.
		Dessa forma, a rolagem que gerou devido ao número excessivo de colunas, vai ficar restrita aos dados da tabela. 
		
		Sintaxe:
		
		div#container {
			overflow-x: auto;
		}
		
		No caso do exemplo, container é o nome do id que criei para a div.
	
	***** IFRAMES ****
		Um iframe tem o tamanho padrão de 300x150px. Mas posso aumentar como quiser.
		
		**** INCOVENIENTES DO IFRAME ****
			1 - Problemas em relação aos mecanismos de busca: segundo o google, os bots de indexação que localizam os conteúdos nos sites podem não reconhecer conteúdo colocar dentro de iframe. Sendo assim, é bom, evitar colocar conteúdo muito sensível ao site em iframes.
	
	**** FORMULÁRIOS ****
		1 - Todo label precisa ser relacionado a um campo do formulário(input).
		
		2 - Métodos de envio de formulários são informados no atributo method e podem ser GET e POST.
			Método padrão do form, quando não informo nada, é o GET.
			No método GET, as informações enviadas pelo formulário ficam visíveis na url do formulário.
			o método POST oculta essas informações na URL, porém não é um método seguro, porque é possível acessar as informações digitadas pelo DevTools / Network/ Headers
			
			Quando usar um ou outro: quando forem dados não sensíveis(sigilosos) podemos utilizar  o GET. Quando forem dados que tenham informações que são particulares e não compartilháveis, usar o método POST.
			
			Método GET só aceita 3000 bytes. E também não aceita envio de fotos.
			
			Quando passa de 3000 bytes ou existe envio de arquivos, usar o POST.
			
			